openapi: 3.0.3
info:
  title: Library API
  version: 1.2.5
  description: STD22069
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPageSize"
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrupdateBook'
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Link a given book to a given author
      description: Say who is the author of the given book
      tags:
        - Books
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: The book to link to an author
        - in: path
          name: authorId 
          schema:
            type: string
          required: true
          description: The author to link to a book
      responses:
        200:
          description: The book which is linked to an author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/authors:
    put:
      summary: Link a list of given books to a list of given authors
      description: Say who is the authors of the given books
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: The book which is linked to an author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/topics:
    put:
      tags:
        - Books
      summary: Specify a list of books' topics 
      description: Specify the topics of a list of books to the given topics 
      requestBody:
        description: |
          A list of objects which contain the bookId and its topicsId to set
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"
        required: true
      responses:
        200:
          description: List of books whose topics are specified 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - Books
      summary: Specify book's topic 
      description: Specify the topic of the given books to a given topic 
      parameters:
        - in: path
          name: bookId 
          description: Id of the book to update 
          required: true 
          schema:
            type: string
        - in: path
          name: topicId 
          description: Id of the topic to set in the book 
          required: true 
          schema:
            type: string
      responses:
        200:
          description: The book which was updated and its topics 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then the list is not filtered.
          schema:
            type: string
          required: false
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPageSize"
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors
      operationId: deleteManyAuthor
      summary: Delete a list of authors
      description: Delete all authors which have the ids in the request body
      parameters:
        - in: query
          name: authors_ids
          description: List of author's id to delete
          required: true
          schema: 
            type: array
            items:
              type: string
      responses:
        200: 
          description: List of authors that have been deleted
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - in: path
          name: aId
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /topics:
    get:
      tags: 
        - Topics
      summary: Get all topics
      description: Get all topics without filter
      operationId: getAllTopics
      parameters:
        - $ref: "#/components/parameters/PaginationPage"
        - $ref: "#/components/parameters/PaginationPageSize"
      responses:
        200:
          description: List of the topics
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"
    put:
      summary: Create or update topics 
      operationId: crupdateTopic 
      tags:
        - Topics
      requestBody:
        description: List of topics to update or create
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
        required: true
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Topics
      summary: Delete a list of topics
      description: Delete all topics with the given ids
      operationId: deleteTopics
      parameters:
        - in: query
          name: topicsIds
          schema:
            type: array
            items:
              type: string
          required: true 
      responses:
        200:
          description: List of topics that was deleted 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"  
  /authorsTopics:
    get:
      summary: Get all AuthorTopics
      operationId: getAuthorsTopics
      tags:
        - AuthorsTopics
      parameters:
        - name: authorId
          in: query
          description: Filter by author ID (optional)
          schema:
            type: string
        - $ref: "#/components/parameters/TopicsPaginationPage"
        - $ref: "#/components/parameters/TopicsPaginationPageSize"
      responses:
        200:
          description: List of AuthorTopics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorTopics'                         
components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
      required:
        - id
        - bookName
        - pageNumbers
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        topic:
          $ref: "#/components/schemas/Topic"
        author:
          $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - bookId
        - authorId 
    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId:
          type: string
      required:
        - bookId
        - topicId
    AuthorTopics:
      type: object
      properties:
        author: 
          $ref: "#/components/schemas/Author"
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    Topic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
  parameters:
    PaginationPage:
      name: page
      in: query
      schema:
        type: integer
        default: 1
      description: page for the pagination
    PaginationPageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 50 
      description: pageSize for the pagination
    TopicsPaginationPage:
      name: page
      in: query
      schema:
        type: integer
        default: 1
      description: Page for pagination
    TopicsPaginationPageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 10
      description: Page size for pagination  
